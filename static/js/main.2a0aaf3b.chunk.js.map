{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","active","isRed","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","multiplier","option","fillColor","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","setCasesType","mapCountries","setMapCountries","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a0aaf3b.chunk.js","sourcesContent":["\r\nimport React from 'react'\r\nimport Card from \"@material-ui/core/Card\"\r\nimport CardContent from \"@material-ui/core/CardContent\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport \"./InfoBox.css\"\r\n\r\n\r\nfunction InfoBox({title,cases,active,isRed,total,...props}) {\r\n    return (\r\n        <Card onClick = {props.onClick}\r\n        className={`infoBox ${active && \"infoBox--selected\"} ${\r\n            isRed && \"infoBox--red\"\r\n          }`}>\r\n           <CardContent>\r\n               <Typography className = \"infoBox__title\" color = \"textSecondary\">\r\n                   {title}\r\n               </Typography>\r\n               <h2 className = \"infoBox__cases\"> {cases}</h2>\r\n               <Typography className = \"infoBox__total\" color = \"textSecondary\">\r\n                   {total} total\r\n               </Typography>\r\n               </CardContent> \r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    multiplier: 800,\r\n    option: { color:\"#cc1034\", fillColor: \"#cc1034\" },\r\n  },\r\n  recovered: {\r\n    multiplier: 1200,\r\n    option: { color:\"#7dd71d\", fillColor: \"#7dd71d\" },\r\n  },\r\n  deaths: {\r\n    multiplier: 2000,\r\n    option: { color:\"#ff6c47\", fillColor: \"#ff6c47\" }\r\n  },\r\n};\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      pathOptions={casesTypeColors[casesType].option}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n\r\n\r\n\r\n  export default sortData","import React from 'react'\r\nimport \"./Map.css\"\r\nimport { TileLayer, MapContainer as LeafletMap, useMap } from \"react-leaflet\";\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({countries,casesType,center,zoom}) {\r\n    return (\r\n        <div className = \"map\">\r\n            <LeafletMap center ={center} zoom = {zoom}>\r\n                <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'/>\r\n                {showDataOnMap(countries,casesType)}\r\n            </LeafletMap>\r\n            \r\n            \r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Map;\r\n","import React from 'react'\r\nimport \"./Table.css\"\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className = \"table\">\r\n           {countries.map(({country,cases}) => (\r\n               <tr>\r\n                   <td>{country}</td>\r\n                   <td><strong>{cases} </strong></td>\r\n               </tr>\r\n\r\n           ))} \r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType = 'cases') => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","\r\nimport './App.css';\r\nimport FormControl from \"@material-ui/core/FormControl\"\r\nimport Select from \"@material-ui/core/Select\"\r\nimport Card from \"@material-ui/core/Card\"\r\nimport CardContent from \"@material-ui/core/CardContent\"\r\nimport MenuItem from \"@material-ui/core/MenuItem\"\r\nimport { useEffect, useState } from 'react';\r\nimport InfoBox from \"./InfoBox\"\r\nimport Map from \"./Map\"\r\nimport Table from \"./Table\"\r\nimport { sortData, prettyPrintStat } from \"./util\";\r\nimport LineGraph from \"./LineGraph\"\r\nimport \"leaflet/dist/leaflet.css\"\r\nimport numeral from \"numeral\";\r\n\r\nfunction App() {\r\n  const [countries,setCountries] = useState([]);\r\n  const [country,setCountry] = useState('worldwide');\r\n  const [countryInfo,setCountryInfo] = useState({})   \r\n  const[tableData,setTableData] = useState([])\r\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\r\n  const [mapZoom, setMapZoom] = useState(3);\r\n  const [casesType, setCasesType] = useState(\"cases\");\r\n  const [mapCountries, setMapCountries] = useState([]);\r\n useEffect(() =>{\r\n    fetch( \"https://disease.sh/v3/covid-19/all\")\r\n   .then(response => response.json())\r\n   .then(data => {\r\n     setCountryInfo(data)\r\n   })\r\n }, [])\r\n\r\n  useEffect(() =>{\r\n     const getCountriesData = async ()=>{\r\n       await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n       .then((response) => response.json())\r\n       .then((data)=> {\r\n         const countries = data.map((country) => (\r\n           {\r\n             name : country.country,\r\n             value : country.countryInfo.iso2\r\n           }));\r\n\r\n           const sortedData = sortData(data)\r\n           setTableData(sortedData);\r\n           setMapCountries(data);\r\n           setCountries(countries);\r\n       });\r\n      \r\n     }\r\n     getCountriesData();\r\n  },[]);\r\n\r\n   const onCountryChange =  async (event) =>{\r\n    const countryCode = event.target.value;\r\n    setCountry(countryCode)\r\n\r\n    const url = countryCode=== \"worldwide\" ? \"https://disease.sh/v3/covid-19/all\" : \r\n    `https://disease.sh/v3/covid-19/countries/${countryCode}`;\r\n   \r\n    await fetch(url)\r\n\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      setCountry(countryCode)\r\n      setCountryInfo(data);\r\n\r\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\r\n      setMapZoom(4);\r\n\r\n    })\r\n    console.log(countryInfo)\r\n    \r\n   };\r\n   \r\n   \r\n  return (\r\n    <div className=\"app\">\r\n      <div className = 'app__left'>\r\n      <div className = \"app__header\">\r\n      <h1>Covid 19 Tracker</h1>\r\n      <FormControl className = \"app_dropdown\">\r\n         <Select variant = \"outlined\"\r\n         onChange ={onCountryChange}\r\n         value = {country} >\r\n\r\n          <MenuItem  value = \"worldwide\"> <h3>Worldwide</h3></MenuItem>\r\n           {\r\n             countries.map(country =>(\r\n               <MenuItem value = {country.value}>{country.name}</MenuItem>\r\n             ))\r\n           }\r\n           \r\n\r\n           \r\n         \r\n         </Select>\r\n      </FormControl>\r\n      </div>\r\n      \r\n     <div className = \"app__stats\">\r\n       <InfoBox \r\n       active = {casesType === \"cases\"}\r\n       onClick={(e) => setCasesType(\"cases\")}\r\n       title = \"Coronavirus Cases\" \r\n       isRed\r\n       cases = {prettyPrintStat(countryInfo.todayCases)} \r\n       total = {numeral(countryInfo.cases).format(\"0.0a\")} />\r\n       <InfoBox\r\n       active = {casesType === \"recovered\"}\r\n       onClick={(e) => setCasesType(\"recovered\")}\r\n        title = \"Recoverd\"  \r\n        cases = {prettyPrintStat(countryInfo.todayRecovered)} \r\n        total = {numeral(countryInfo.recovered).format(\"0.0a\")} />\r\n       <InfoBox title = \"Deaths\"\r\n       isRed\r\n       active = {casesType === \"deaths\"}\r\n        onClick={(e) => setCasesType(\"deaths\")} \r\n        cases = {prettyPrintStat(countryInfo.todayDeaths)} \r\n       total = {numeral(countryInfo.deaths).format(\"0.0a\")} />\r\n\r\n     </div>\r\n     <Map\r\n          countries={mapCountries}\r\n          casesType={casesType}\r\n          center={mapCenter}\r\n          zoom={mapZoom}\r\n        />\r\n      </div>\r\n<Card className = \"app_right\">\r\n      <CardContent>\r\n        <h2>Live Cases by Country</h2>\r\n        <Table countries ={tableData}/>\r\n        <h2>Worldwide new {casesType}</h2>\r\n            <LineGraph casesType={casesType} />\r\n      </CardContent>\r\n</Card>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}